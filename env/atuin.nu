export const ATUIN_INIT_PATH = ($nu.cache-dir | path join atuin init.nu)

const ctrl_b_handler = `
# NOTE: Everything below is not generated by upstream, but by @ErichDonGubler.

def must_replace [$what: string, find: string, replace: string] {
	let original = $in
	let replaced = $original | str replace $find $replace
	if $replaced == $original {
		error make {
			msg: $"failed to replace string in ($what)"
			label: {
				text: "unable to find this text"
				span: (metadata $find).span
			}
		}
	}
	$replaced
}

$env.config = (
	$env.config | upsert keybindings (
		$env.config.keybindings
		| append {
			name: atuin
			modifier: control
			keycode: char_b
			mode: [emacs, vi_normal, vi_insert]
			event: {
				send: ExecuteHostCommand
				cmd: (
					alias must_replace = must_replace "command generated by `_atuin_search_cmd`";
					_atuin_search_cmd
						| must_replace 'ATUIN_QUERY: (commandline)' 'ATUIN_QUERY: ""'
						| must_replace 'commandline edit' 'commandline edit --insert'
				)
			}
		}
	)
)
`

# Creates an `init.nu` file via `atuin init â€¦` at `ATUIN_INIT_PATH`.
export def init-atuin [] {
	mkdir ($ATUIN_INIT_PATH | path dirname)
	atuin init nu --disable-up-arrow | save --force $ATUIN_INIT_PATH
	echo $ctrl_b_handler | save --append $ATUIN_INIT_PATH
}
